# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.17.2
#   kernelspec:
#     display_name: Python [conda env:trading_env]
#     language: python
#     name: conda-env-trading_env-py
# ---

# %% [markdown]
# # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫

# %%
import numpy as np
import pandas as pd
import pandas_ta as ta

# %%
eps = 1e-8


# %% [markdown]
# # EMA

# %% [markdown]
# ## delta_ema

# %% [markdown]
# üìå –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ **delta_ema** *(df, ema_lengths=[20], window_size=20, num_blocks=4)*\
# **–í—Ö–æ–¥:**
# - **df** ‚Äî DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–µ—á–∞–º–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π Close.
# - **ema_lengths** ‚Äî —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω EMA, –Ω–∞–ø—Ä–∏–º–µ—Ä [20, 50]
# - **tema_lengths** ‚Äî —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω TEMA, –Ω–∞–ø—Ä–∏–º–µ—Ä
# - **window_size** ‚Äî –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
# - **num_blocks** ‚Äî –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –¥–µ–ª–∏–º –æ–∫–Ω–æ
# - **norm_period** ‚Äî —Ä–∞–∑–º–µ—Ä —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
#
# **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:**\
# –î–ª—è –∫–∞–∂–¥–æ–π EMA –∏–∑ —Å–ø–∏—Å–∫–∞ **ema_lenghts**:
#
# –°—á–∏—Ç–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ EMA –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞:
# $$\frac{ema_{start} - ema_{end}}{ema_{start}}$$
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ —Å–∫–æ–ª—å–∫–∏—Ö –±–ª–æ–∫–∞—Ö EMA —Ä–æ—Å–ª–∞ (–∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0‚Äì4 –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö).\
# **–í—ã—Ö–æ–¥:**\
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ df, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:\
# block1_emaXX_rel_change, ..., block4_emaXX_rel_change ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è EMA –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞.\
# emaXX_grow_blocks ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç—É—â–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π EMA.

# %%
def delta_ema(df, ema_lengths=[20], tema_lengths=[9], window_size=20, num_blocks=4):
    close = df['Close']
    block_size = window_size // num_blocks
    shifts = [block_size * i for i in range(1, num_blocks + 1)]

    df = df.copy()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ EMA (–Ω–∞ –æ–±—ã—á–Ω–æ–π —Ü–µ–Ω–µ)
    for ema_length in ema_lengths:
        ema = ta.ema(close, ema_length)

        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ —Ç–∞–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã
        for i, shift in enumerate(shifts, 1):
            start_vals = ema.shift(shift - block_size)
            end_vals = ema.shift(shift)
            df[f'block{i}_ema{ema_length}_rel_change'] = (end_vals - start_vals) / start_vals

        # –ö–æ–ª-–≤–æ —Ä–∞—Å—Ç—É—â–∏—Ö –±–ª–æ–∫–æ–≤
        grow_flags = [(ema.shift(s) > ema.shift(s - block_size)) for s in shifts]
        df[f'ema{ema_length}_grow_blocks'] = pd.concat(grow_flags, axis=1).sum(axis=1).astype(int)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ TEMA
    for tema_length in tema_lengths:
        tema = ta.tema(close, tema_length)

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è TEMA –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
        for i, shift in enumerate(shifts, 1):
            start_vals = tema.shift(shift - block_size)
            end_vals = tema.shift(shift)
            df[f'block{i}_tema{tema_length}_rel_change'] = (end_vals - start_vals) / start_vals

        # –ö–æ–ª-–≤–æ —Ä–∞—Å—Ç—É—â–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è TEMA
        grow_flags = [(tema.shift(s) > tema.shift(s - block_size)) for s in shifts]
        df[f'tema{tema_length}_grow_blocks'] = pd.concat(grow_flags, axis=1).sum(axis=1).astype(int)

    return df


# %% [markdown]
# ## ema_above_price

# %% [markdown]
# –î–æ–±–∞–≤–ª—è–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ EMA –≤—ã—à–µ —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è

# %%
def ema_above_price(df, lengths=[20, 100]):
    df = df.copy()
    
    for length in lengths:
        # –í—ã—á–∏—Å–ª—è–µ–º EMA —Å –ø–æ–º–æ—â—å—é pandas_ta
        ema = ta.ema(df['Close'], length=length)
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ (1 - EMA –≤—ã—à–µ —Ü–µ–Ω—ã, 0 - –Ω–µ—Ç)
        df[f'ema{length}_above_price'] = (ema > df['Close']).astype(int)
    
    return df


# %% [markdown]
# ## ema_speed

# %% [markdown]
# –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è EMA —Å –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–æ–π.\
# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
# - –ü–µ—Ä–∏–æ–¥—ã EMA –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [20, 50])
# - –û–∫–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏/—É—Å–∫–æ—Ä–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [10, 30, 60])
#
# –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é ema

# %%
def ema_speed(df, lengths=[20, 50], windows=[10, 30, 60]):

    df = df.copy()
    
    for length in lengths:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        ema_values = ta.ema(df['Close'], length=length)
        
        for window in windows:
            # –°–∫–æ—Ä–æ—Å—Ç—å = —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ EMA –∑–∞ window —Å–≤–µ—á–µ–π
            speed_col = f'ema{length}_speed_{window}'
            speed_values = (ema_values - ema_values.shift(window)) / window
            
            # –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ SMA —Ü–µ–Ω—ã –∑–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥
            norm_factor = df['Close'].rolling(window).mean()
            df[speed_col] = speed_values / norm_factor
            
            # –£—Å–∫–æ—Ä–µ–Ω–∏–µ = –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            accel_col = f'ema{length}_accel_{window}'
            df[accel_col] = df[speed_col].diff(window) / window
            
            # –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è
            df[accel_col] = df[accel_col] / norm_factor
            
    return df


# %% [markdown]
# ## ema_price_distance

# %% [markdown]
# **ema_price_distance** –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É EMA –∏ —Ü–µ–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è, –∞ —Ç–∞–∫–∂–µ –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
#     
# –í—Ö–æ–¥:
# - df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π 'Close'
# - ema_periods: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ EMA
# - norm_window: –æ–∫–Ω–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ü–µ–Ω—ã)
# - change_windows: —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
#     
# –í—ã—Ö–æ–¥:
# - –ö–æ–ø–∏—è DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:
# * ema{period}_distance: –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ EMA –æ—Ç —Ü–µ–Ω—ã
# * ema{period}_change_{window}: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
#

# %%
def ema_price_distance(df, ema_periods=[20, 50], norm_window=200, change_windows=[3, 10]):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É EMA –∏ —Ü–µ–Ω–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è,
    –∞ —Ç–∞–∫–∂–µ –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è.
    
    –í—Ö–æ–¥:
    - df: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π 'Close'
    - ema_periods: —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–∏–æ–¥–æ–≤ EMA
    - norm_window: –æ–∫–Ω–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ —Ü–µ–Ω—ã)
    - change_windows: —Å–ø–∏—Å–æ–∫ –æ–∫–æ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
    –í—ã—Ö–æ–¥:
    - –ö–æ–ø–∏—è DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:
      * ema{period}_distance: –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ EMA –æ—Ç —Ü–µ–Ω—ã
      * ema{period}_change_{window}: –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    """
    df = df.copy()
    
    # –ë–∞–∑–æ–≤–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    base_ma = df['Close'].rolling(norm_window).mean()
    
    for period in ema_periods:
        # –í—ã—á–∏—Å–ª—è–µ–º EMA
        ema = ta.ema(df['Close'], length=period)
        
        # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ EMA –æ—Ç —Ü–µ–Ω—ã (–≤ % –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ MA)
        distance = (df['Close'] - ema) / base_ma
        df[f'ema{period}_distance'] = distance
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ)
        for window in change_windows:
            # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∑–∞ window –ø–µ—Ä–∏–æ–¥–æ–≤
            pct_change = distance.pct_change(window)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ tanh –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            normalized_change = np.tanh(pct_change.fillna(0))
            
            df[f'ema{period}_change_{window}'] = normalized_change
    
    return df


# %% [markdown]
# # TEMA

# %% [markdown]
# –§—É–Ω–∫—Ü–∏—è **tema_slope_change**.
#
# –í—Ö–æ–¥: DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π 'Close', —Å–ø–∏—Å–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤ TEMA **tema_periods** –∏ –æ–∫–æ–Ω —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∫–ª–æ–Ω–∞ **slope_windows**
#
# –í—ã—Ö–æ–¥: –ö–æ–ø–∏—è DataFrame —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞–∫–ª–æ–Ω–∞ TEMA

# %%
def tema_slope_change(df, tema_periods=[5], slope_windows=[3]):
    df = df.copy()
    
    for tema_period in tema_periods:
        for slope_window in slope_windows:
            # –°—á–∏—Ç–∞–µ–º TEMA
            tema = ta.tema(df['Close'], length=tema_period)
            
            # –°—á–∏—Ç–∞–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ TEMA (–ø–µ—Ä–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è)
            tema_slope = ta.slope(close=tema, length=slope_window)
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞
            tema_slope_change = tema_slope / tema_slope.rolling(slope_window).mean().abs()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é tanh
            col_name = f'tema_slope_change_tp{tema_period}_sw{slope_window}'
            df[col_name] = np.tanh(tema_slope_change)
    
    return df


# %% [markdown]
# # MACD

# %% [markdown]
# ## macd_cross

# %% [markdown]
# üìå –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: **macd_cross** *(df, fast=12, slow=26, signal=9)*
#
# –í—Ö–æ–¥:
# - **df** ‚Äî DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π Close (—Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è).
# - **fast, slow, signal** ‚Äî –ø–µ—Ä–∏–æ–¥—ã MACD (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12, 26, 9).
#
# –î–µ–π—Å—Ç–≤–∏–µ:
# - –í—ã—á–∏—Å–ª—è–µ—Ç MACD, —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É —Å –ø–æ–º–æ—â—å—é pandas_ta.
# - –î–æ–±–∞–≤–ª—è–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ **macd_long_signal**:\
# 1 ‚Äî –µ—Å–ª–∏ MACD –≤—ã—à–µ —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ (–ª–æ–Ω–≥–æ–≤—ã–π —Ä–µ–∂–∏–º).\
# 0 ‚Äî –µ—Å–ª–∏ MACD –Ω–∏–∂–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏.
#
# –í—ã—Ö–æ–¥:\
# –ò—Å—Ö–æ–¥–Ω—ã–π df —Å –Ω–æ–≤—ã–º –ø—Ä–∏–∑–Ω–∞–∫–æ–º:\
# **macd_long_signal** (–±–∏–Ω–∞—Ä–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫).

# %%
def macd_cross(df, fast=12, slow=26, signal=9):
    macd_data = ta.macd(df['Close'], fast=fast, slow=slow, signal=signal)
    df['macd_long_signal'] = (macd_data['MACD_12_26_9'] > macd_data['MACDs_12_26_9']).astype(int)
    return df


# %% [markdown]
# ## delta_macd

# %% [markdown]
# üìå –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã MACD, —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–∏–∑–Ω–∞–∫ –ª–æ–Ω–≥–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ cross_lookback —Å–≤–µ—á–µ–π.
#
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
# - fast, slow, signal ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã MACD
# - slope_length ‚Äî –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã MACD
# - cross_lookback ‚Äî –∫–æ–ª-–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–≤–µ—á–µ–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏—â–µ—Ç—Å—è –ª–æ–Ω–≥–æ–≤–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ

# %%
def macd(df, fast=12, slow=26, signal=9, slope_length=5, cross_lookback=5):
    df = df.copy()

    # –°—á–∏—Ç–∞–µ–º MACD –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    macd_df = ta.macd(df['Close'], fast=fast, slow=slow, signal=signal)
    macd = macd_df[f'MACD_{fast}_{slow}_{signal}']
    macd_signal = macd_df[f'MACDs_{fast}_{slow}_{signal}']
    macd_hist = macd_df[f'MACDh_{fast}_{slow}_{signal}']

    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ MACD
    df[f'macd_{fast}_{slow}_{signal}'] = macd
    df[f'macd_signal_{fast}_{slow}_{signal}'] = macd_signal
    df[f'macd_hist_{fast}_{slow}_{signal}'] = macd_hist

    # –£–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ slope_length —Å–≤–µ—á–µ–π
    df[f'macd_hist_slope_{fast}_{slow}_{signal}_{slope_length}'] = macd_hist.diff(slope_length) / slope_length

    # –õ–æ–Ω–≥–æ–≤–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ MACD –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–≤–µ—á–µ–π
    macd_cross_long = (macd > macd_signal) & (macd.shift(1) <= macd_signal.shift(1))
    df[f'macd_long_signal_{fast}_{slow}_{signal}_{cross_lookback}'] = macd_cross_long.rolling(cross_lookback, min_periods=1).max().astype(int)

    return df


# %% [markdown]
# # ATR

# %% [markdown]
# ## delta_atr

# %% [markdown]
# üìå –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ **delta_atr** *(df, atr_length=14, window_size=20, num_blocks=4)*  
# **–í—Ö–æ–¥:**
# - **df** ‚Äî DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Å–≤–µ—á–∞–º–∏ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏ High, Low, Close.
# - **atr_length** ‚Äî –ø–µ—Ä–∏–æ–¥ ATR (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14).
# - **window_size** ‚Äî –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
# - **num_blocks** ‚Äî –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –¥–µ–ª–∏–º –æ–∫–Ω–æ.
#
# **–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:**  
# –î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ **atr_length**:\
# –°—á–∏—Ç–∞–µ—Ç ATR —á–µ—Ä–µ–∑ `pandas_ta.atr()`.\
# –î–µ–ª–∏—Ç –æ–∫–Ω–æ –Ω–∞ **num_blocks** —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ATR:
# $$\frac{ATR_{end} - ATR_{start}}{ATR_{start}}$$
#
# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≤ —Å–∫–æ–ª—å–∫–∏—Ö –±–ª–æ–∫–∞—Ö ATR —Ä–æ—Å (–∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0‚Äìnum_blocks –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö).
#
# **–í—ã—Ö–æ–¥:**  
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ df, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:  
# `block1_atrXX_rel_change`, ..., `blockN_atrXX_rel_change` ‚Äî –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ATR –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞.  
# `atrXX_grow_blocks` ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç—É—â–∏—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ ATR.

# %%
def delta_atr(df, atr_length=14, window_size=20, num_blocks=4):
    eps = 1e-9
    
    block_size = window_size // num_blocks
    shifts = [block_size * i for i in range(1, num_blocks + 1)]

    df = df.copy()
    
    atr = ta.atr(df['High'], df['Low'], df['Close'], length=atr_length)
    atr = atr / df['High'].rolling(window_size).max()  # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

    for i, shift in enumerate(shifts, 1):
        start_vals = atr.shift(shift - block_size)
        end_vals = atr.shift(shift)
        df[f'block{i}_atr{atr_length}_rel_change'] = (end_vals - start_vals) / (start_vals + eps)

    grow_flags = [(atr.shift(s) > atr.shift(s - block_size)) for s in shifts]
    df[f'atr{atr_length}_grow_blocks'] = pd.concat(grow_flags, axis=1).sum(axis=1).astype(int)

    return df


# %% [markdown]
# # Volume

# %% [markdown]
# ## delta_ema_volume

# %%
def delta_ema_volume(df, ema_lengths=[20], window_size=20, num_blocks=4):
    volume_norn = df['Volume'] / df['Volume'].rolling(20).max()
    block_size = window_size // num_blocks
    shifts = [block_size * i for i in range(1, num_blocks + 1)]

    df = df.copy()

    for ema_length in ema_lengths:
        ema = ta.ema(volume_norn, ema_length)

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è EMA –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ
        for i, shift in enumerate(shifts, 1):
            start_vals = ema.shift(shift - block_size)
            end_vals = ema.shift(shift)
            df[f'block{i}_ema_volume{ema_length}_rel_change'] = (end_vals - start_vals) / (start_vals + eps)

        # –ö–æ–ª-–≤–æ —Ä–∞—Å—Ç—É—â–∏—Ö –±–ª–æ–∫–æ–≤
        grow_flags = [(ema.shift(s) > ema.shift(s - block_size)) for s in shifts]
        df[f'ema_volume{ema_length}_grow_blocks'] = pd.concat(grow_flags, axis=1).sum(axis=1).astype(int)

    return df


# %% [markdown]
# # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è

# %% [markdown]
# üìå –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ **regression_slope_price** *(df, n=[5, 10, 20, 60])*  \
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ –æ–∫–Ω–µ n –¥–ª—è —Ü–µ–Ω—ã

# %%
def regression_slope_price(df, n=[5, 10, 20, 60]):
    df = df.copy()
    for window in n:
        df[f'price_slope_{window}'] = ta.slope(df['Close'], length=window)
    return df


# %% [markdown]
# üìå –û–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ **regression_slope_volume** *(df, n=[5, 10, 20, 60])*  \
# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–≥–ª–∞ –Ω–∞–∫–ª–æ–Ω–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –Ω–∞ –æ–∫–Ω–µ n –¥–ª—è –æ–±—ä–µ–º–∞

# %%
def regression_slope_volume(df, n=[5, 10, 20, 60]):
    df = df.copy()
    for window in n:
        df[f'volume_slope_{window}'] = ta.slope(df['Volume'], length=window)
    return df


# %% [markdown]
# # RSI

# %% [markdown]
# ## delta_rsi

# %% [markdown]
# üìå –ê–Ω–∞–ª–æ–≥ delta_ema, –Ω–æ –¥–ª—è RSI.\
# –ü–æ–º–∏–º–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–º –±–ª–æ–∫–µ —Å—á–∏—Ç–∞–µ—Ç\
# —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞.
#
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
# - df ‚Äî DataFrame —Å –∫–æ–ª–æ–Ω–∫–æ–π Close
# - rsi_lengths ‚Äî —Å–ø–∏—Å–æ–∫ –¥–ª–∏–Ω RSI
# - window_size ‚Äî –æ–±—â–µ–µ –∫–æ–ª-–≤–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
# - num_blocks ‚Äî –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –¥–µ–ª–∏–º –æ–∫–Ω–æ
#

# %%
def delta_rsi(df, rsi_lengths=[21], window_size=20, num_blocks=4):
  
    close = df['Close']
    block_size = window_size // num_blocks
    shifts = [block_size * i for i in range(1, num_blocks + 1)]

    df = df.copy()

    for rsi_length in rsi_lengths:
        rsi = ta.rsi(close, length=rsi_length)

        # –î–æ–±–∞–≤–ª—è–µ–º RSI (–æ—Ç 0 –¥–æ 1)
        df[f'rsi{rsi_length}'] = rsi / 100

        # –ò–∑–º–µ–Ω–µ–Ω–∏—è RSI –∏ —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É –±–ª–æ–∫—É
        for i, shift in enumerate(shifts, 1):
            start_vals = rsi.shift(shift - block_size)
            end_vals = rsi.shift(shift)
            df[f'block{i}_rsi{rsi_length}_rel_change'] = (end_vals - start_vals) / start_vals

            # –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSI –æ—Ç 0 –¥–æ 1
            block_vals = rsi.shift(shift - block_size).rolling(block_size).mean() / 100 
            df[f'block{i}_rsi{rsi_length}_mean'] = block_vals

        # –ö–æ–ª-–≤–æ —Ä–∞—Å—Ç—É—â–∏—Ö –±–ª–æ–∫–æ–≤
        grow_flags = [(rsi.shift(s) > rsi.shift(s - block_size)) for s in shifts]
        df[f'rsi{rsi_length}_grow_blocks'] = pd.concat(grow_flags, axis=1).sum(axis=1).astype(int)

    return df


# %% [markdown]
# ## rsi_speed

# %% [markdown]
# –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è RSI.
# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
# - –ü–µ—Ä–∏–æ–¥—ã RSI –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [21])
# - –û–∫–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏/—É—Å–∫–æ—Ä–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é [10, 30, 60])
#
# –ù–∞ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é RSI

# %%
def rsi_speed(df, lengths=[21], windows=[10, 30, 60]):

    df = df.copy()
    
    for length in lengths:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç 0 –¥–æ 1)
        rsi_col = ta.rsi(df['Close'], length=length) / 100  # –ù–æ—Ä–º–∏—Ä–æ–≤–∫–∞
        
        for window in windows:
            # –°–∫–æ—Ä–æ—Å—Ç—å = —Å—Ä–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSI –∑–∞ window —Å–≤–µ—á–µ–π
            speed_col = f'rsi{length}_speed_{window}'
            df[speed_col] = (rsi_col - rsi_col.shift(window)) / window
            
            # –£—Å–∫–æ—Ä–µ–Ω–∏–µ = –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
            accel_col = f'rsi{length}_accel_{window}'
            df[accel_col] = df[speed_col].diff(window) / window
            
    return df


# %% [markdown]
# ## rsi_divergence

# %% [markdown]
# –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–π rsi –∏ —Ü–µ–Ω—ã.
#
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
# - —Å–º–µ—â–µ–Ω–∏–µ **shift** –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
# - **period** - –ø–µ—Ä–∏–æ–¥—ã rsi

# %%
def rsi_divergence(df, shift=[5, 10], period=[14]):
    df = df.copy()

    for p in period:
        rsi = ta.rsi(df['Close'], length=p)

        for s in shift:
            col_name = f"bullish_rsi_div_p{p}_s{s}"
            
            # –£—Å–ª–æ–≤–∏–µ –±—ã—á—å–µ–π –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏
            df[col_name] = (
                (df['Low'] < df['Low'].shift(s)) &   # —Ü–µ–Ω–∞ –æ–±–Ω–æ–≤–∏–ª–∞ –º–∏–Ω–∏–º—É–º
                (rsi > rsi.shift(s))                 # RSI —Å–¥–µ–ª–∞–ª –≤—ã—à–µ –º–∏–Ω–∏–º—É–º
            ).astype(int)

    return df

# %%
