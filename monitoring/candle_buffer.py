# ---
# jupyter:
#   jupytext:
#     formats: ipynb,py:percent
#     text_representation:
#       extension: .py
#       format_name: percent
#       format_version: '1.3'
#       jupytext_version: 1.17.2
#   kernelspec:
#     display_name: Python [conda env:trading_env]
#     language: python
#     name: conda-env-trading_env-py
# ---

# %% [markdown]
# # –ú–æ–¥—É–ª—å –±—É—Ñ–µ—Ä–∞ —Å–≤–µ—á–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–Ω–µ—Ç

# %% [markdown]
# # –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ 

# %%
# –ú–æ–¥—É–ª—å –±—É—Ñ–µ—Ä–∞ —Å–≤–µ—á–µ–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –º–æ–Ω–µ—Ç
import sys
import time
import pandas as pd
from collections import defaultdict
from datetime import datetime, timedelta
from threading import Thread, Lock
import requests
sys.path.append("C:\\Users\\nikita\\Documents\\MagisterML\\MyJupiter\\trading_project\\")
from concurrent.futures import ThreadPoolExecutor
import json
import os
from pybit.unified_trading import HTTP
import numpy as np
import contextlib
import io

from modules.indicators import delta_ema, macd_cross, delta_atr, delta_ema_volume, macd, regression_slope_price, regression_slope_volume, delta_rsi, ema_above_price, ema_speed, rsi_speed, rsi_divergence,\
    tema_slope_change, ema_price_distance, apply_indicators
from modules.create_df import fetch_kline_data, kline_candles
from monitoring import api_info, telegram_info


# %% [markdown]
# # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

# %%
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MODEL = None
THRESHOLD = None
FEATURE_COLUMNS = None
RUNNING = True

candle_buffers = defaultdict(dict)
buffer_locks = defaultdict(Lock)
last_update_time = {}

SYMBOLS = ['LINKUSDT', 'BCHUSDT']
BUFFER_SIZE = 300
MAX_WORKERS = min(10, len(SYMBOLS)) #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏–º–≤–æ–ª–æ–≤
TF_MINUTES = 1
MONITOR_INTERVAL = 1 * 60  # –∫–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) 15 * 60 –¥–ª—è –º15

api_key = api_info.api_key
api_secret = api_info.api_secret

TELEGRAM_CHAT_ID = telegram_info.TELEGRAM_CHAT_ID
TELEGRAM_BOT_TOKEN = telegram_info.TELEGRAM_BOT_TOKEN

BYBIT_CLIENT = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è


# %% [markdown]
# # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏

# %% [markdown]
# ## set_model_and_params

# %%
def set_model_and_params(model, threshold, feature_columns):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    """
    global MODEL, THRESHOLD, FEATURE_COLUMNS
    MODEL = model
    THRESHOLD = threshold
    FEATURE_COLUMNS = feature_columns


# %% [markdown]
# # –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

# %% [markdown]
# ## start_monitoring

# %%
def start_monitoring(model, threshold, feature_columns, 
                     send_telegram=True, send_orders=False):
    """
    –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –º–æ–¥–µ–ª—å—é.
    """
    global MODEL, THRESHOLD, FEATURE_COLUMNS, SEND_TELEGRAM, SEND_ORDERS, RUNNING
    
    MODEL = model
    THRESHOLD = threshold
    FEATURE_COLUMNS = feature_columns
    SEND_TELEGRAM = send_telegram
    SEND_ORDERS = send_orders
    RUNNING = True

    if SEND_ORDERS:
        if not init_bybit_client(api_key, api_secret):
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bybit, —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            SEND_ORDERS = False

    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–Ω–µ—Ç...")
    for symbol in SYMBOLS:
        try:
            init_buffer(symbol)
            print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {symbol}, {BUFFER_SIZE} —Å–≤–µ—á–µ–π")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {symbol} ‚Äî –æ—à–∏–±–∫–∞: {e}")

    print("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    monitor_thread = Thread(target=monitor_loop, daemon=False)
    monitor_thread.start()


# %% [markdown]
# ## stop_monitoring

# %%
def stop_monitoring():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global RUNNING
    RUNNING = False
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")


# %% [markdown]
# # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–µ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏

# %% [markdown]
# ## init_bybit_client

# %%
def init_bybit_client(api_key, api_secret, testnet=False):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Bybit API"""
    global BYBIT_CLIENT
    try:
        BYBIT_CLIENT = HTTP(
            api_key=api_key,
            api_secret=api_secret,
            testnet=testnet,
            recv_window=15000  # —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
        )
        print("‚úÖ Bybit –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False


# %% [markdown]
# # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ —Å–≤–µ—á–µ–π

# %% [markdown]
# ## init_buffer

# %%
def init_buffer(symbol):
    end = int(time.time() * 1000)
    start = end - BUFFER_SIZE * TF_MINUTES * 60 * 1000

    raw_df = fetch_kline_data(symbol, str(TF_MINUTES), start, end)

    if raw_df is None or raw_df.empty:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {symbol}")
        return

    # –®–∞–≥ 1: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
    processed_df = apply_indicators(raw_df.copy())

    # –®–∞–≥ 2: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
    processed_df = processed_df[FEATURE_COLUMNS]
    processed_df = processed_df.loc[:, ~processed_df.columns.duplicated()]

    # –®–∞–≥ 3: latest_row –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    latest_row = processed_df.iloc[-1].copy()

    # –®–∞–≥ 4: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    with buffer_locks[symbol]:
        candle_buffers[symbol] = {
            'raw_data': raw_df.tail(BUFFER_SIZE).reset_index(drop=True),   # OHLCV
            'processed_data': processed_df.copy(),                        # –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
            'latest_row': latest_row
        }

    #print(f"‚úÖ –ë—É—Ñ–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {symbol}, {len(processed_df)} —Å—Ç—Ä–æ–∫")
    # if symbol == 'LINKUSDT':
    #     print("üìà –ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ä (OHLCV):")
    #     print(raw_df.tail(1).to_string(index=False))


# %% [markdown]
# # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞

# %% [markdown]
# ## update_buffer

# %%
def update_buffer(symbol):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–æ–π"""
    try:
        if MODEL is None or FEATURE_COLUMNS is None:
            raise RuntimeError("–ú–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        new_candle = fetch_latest_candle(symbol, TF_MINUTES)
        if new_candle is None or new_candle.empty:
            print(f"‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤–æ–π —Å–≤–µ—á–∏ –¥–ª—è {symbol}")
            return "retry"

        with buffer_locks[symbol]:
            buffer = candle_buffers.get(symbol)
            if not buffer or buffer['raw_data'].empty:
                print(f"‚ö†Ô∏è –ë—É—Ñ–µ—Ä –ø—É—Å—Ç –¥–ª—è {symbol}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
                init_buffer(symbol)
                return "retry"

            last_time = buffer['raw_data']["Date"].iloc[-1]
            new_time = new_candle["Date"].iloc[-1]

            if new_time <= last_time:
                print(f"‚è≠ –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –¥–ª—è {symbol}")
                return "skip"

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ —Å –±—É—Ñ–µ—Ä–æ–º
            full_df = pd.concat([buffer['raw_data'], new_candle.tail(1)], ignore_index=True).tail(BUFFER_SIZE)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
            processed_df = apply_indicators(full_df.copy())
            processed_df = processed_df[FEATURE_COLUMNS]
            processed_df = processed_df.loc[:, ~processed_df.columns.duplicated()]

            if processed_df.empty:
                print(f"‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∞ {symbol} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤.")
                return "retry"

            missing = set(FEATURE_COLUMNS) - set(processed_df.columns)
            if missing:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏—á–∏: {missing}")

            latest_row = processed_df.iloc[-1].copy()

            # –û–±–Ω–æ–≤–ª—è–µ–º –±—É—Ñ–µ—Ä
            candle_buffers[symbol] = {
                'raw_data': full_df,                        # OHLCV
                'processed_data': processed_df.copy(),     # –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏
                'latest_row': latest_row
            }

            # print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {symbol} –¥–æ {new_time}")
            if symbol == 'LINKUSDT':
                print(full_df[['Date', 'Open', 'High', 'Low', 'Close', 'Volume']].tail(1).to_string(index=False))

            return "ok"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {symbol}: {str(e)[:200]}")
        return "retry"


# %% [markdown]
# # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

# %% [markdown]
# ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

# %% [markdown]
# ### monitor_loop

# %%
def monitor_loop(send_telegram=True, send_orders=False):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global TIME_DIFF, RUNNING

    sync_bybit_time_simple()
    original_time = time.time
    time.time = lambda: original_time() + TIME_DIFF / 1000

    print(f"üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (TF={TF_MINUTES} –º–∏–Ω, –∏–Ω—Ç–µ—Ä–≤–∞–ª={MONITOR_INTERVAL} —Å–µ–∫)")

    try:
        wait_until_next_candle()

        while RUNNING:
            start = time.time()
            print(f"\nüîÑ –¶–∏–∫–ª {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

            # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–≤ ---
            with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
                update_results = list(executor.map(update_buffer, SYMBOLS))

            # –†—É—á–Ω–æ–π –ø–æ–≤—Ç–æ—Ä –¥–ª—è "retry"
            for symbol, status in zip(SYMBOLS, update_results):
                if status == "retry":
                    print(f"üîÅ –ü–æ–≤—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {symbol}")
                    update_buffer(symbol)

            # --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Å–∏–≥–Ω–∞–ª—ã ---
            def process_and_alert(symbol):
                result = process_symbol(symbol, verbose=False)  # –£–±—Ä–∞–ª–∏ verbose –≤—ã–≤–æ–¥
                if result is not None:
                    latest_row, y_pred, y_proba, raw_latest = result
                    order_sent = send_alert(
                        symbol,
                        latest_row=latest_row,
                        raw_row=raw_latest,
                        y_pred=y_pred,
                        y_proba=y_proba,
                        send_telegram=send_telegram,
                        send_orders=send_orders
                    )
                    return 1, order_sent
                return 0, False

            with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
                results = list(executor.map(process_and_alert, SYMBOLS))
            
            signal_count = sum(result[0] for result in results)
            order_count = sum(result[1] for result in results)

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ ---
            drift = check_bybit_server_time()
            if drift and drift > 2.0:
                print("üîÅ –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏...")
                resync_system_time()
                time.sleep(2)
                sync_bybit_time_simple()
                time.time = lambda: original_time() + TIME_DIFF / 1000

            elapsed = time.time() - start
            print(
                f"\nüìä –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω:"
                f"\n- –û–±–Ω–æ–≤–ª–µ–Ω–æ: {update_results.count('ok')}/{len(SYMBOLS)}"
                f"\n- –°–∏–≥–Ω–∞–ª—ã: {signal_count}"
                f"\n- –û—Ä–¥–µ—Ä–∞: {order_count}"
                f"\n- –í—Ä–µ–º—è: {elapsed:.2f} —Å–µ–∫"
            )

            if RUNNING:
                time.sleep(max(0, MONITOR_INTERVAL - elapsed))

    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {str(e)[:200]}")
    finally:
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")


# %% [markdown]
# ### wait_until_next_candle

# %%
def wait_until_next_candle(tf_minutes=1):
    """–ñ–¥—ë—Ç –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏ TF."""
    now = datetime.utcnow()  # UTC –±–µ–∑ tz
    total_seconds = now.minute * 60 + now.second
    seconds_to_wait = tf_minutes * 60 - (total_seconds % (tf_minutes * 60))
    print(f"‚è≥ –ñ–¥—ë–º {seconds_to_wait} —Å–µ–∫—É–Ω–¥ –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏...")
    time.sleep(seconds_to_wait + 1)


# %% [markdown]
# ## –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏

# %% [markdown]
# ### sync_bybit_time_simple

# %%
def sync_bybit_time_simple():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API Bybit –±–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    global TIME_DIFF
    try:
        server_time = int(requests.get(
            "https://api.bybit.com/v5/market/time",
            timeout=3
        ).json()["result"]["timeNano"]) // 1_000_000
        
        local_time = int(time.time() * 1000)
        TIME_DIFF = server_time - local_time
        print(f"‚è± –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: {TIME_DIFF/1000:.3f} —Å–µ–∫")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è: {e}")
        TIME_DIFF = 0


# %% [markdown]
# ### def check_bybit_server_time

# %%
def check_bybit_server_time():
    try:
        response = requests.get("https://api.bybit.com/v5/market/time", timeout=5)
        response.raise_for_status()
        data = response.json()
        server_time_ms = int(data["result"]["timeNano"]) // 1_000_000
        local_time_ms = int(time.time() * 1000)
        drift = abs(server_time_ms - local_time_ms) / 1000
        if drift > 3:
            print(f"‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å Bybit –≤—Ä–µ–º–µ–Ω–µ–º: {drift:.2f} —Å–µ–∫")
        else:
            print(f"‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Bybit (—Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: {drift:.2f} —Å–µ–∫)")
        return drift
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è Bybit: {e}")
        return None


# %% [markdown]
# ## –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

# %% [markdown]
# ### process_symbol

# %%
def process_symbol(symbol, verbose=True):
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    if MODEL is None or FEATURE_COLUMNS is None:
        if verbose:
            print(f"[{symbol}] ‚ùå MODEL –∏–ª–∏ FEATURE_COLUMNS –Ω–µ –∑–∞–¥–∞–Ω—ã!")
        return None

    try:
        with buffer_locks[symbol]:
            buffer = candle_buffers.get(symbol)
            if not buffer:
                if verbose:
                    print(f"‚ùå –ë—É—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {symbol}")
                return None

            latest_row = buffer.get('latest_row')
            processed_data = buffer.get('processed_data')

        if latest_row is None or processed_data is None or processed_data.empty:
            if verbose:
                print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None

        missing = [col for col in FEATURE_COLUMNS if col not in processed_data.columns]
        if missing:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∏—á–∏ –≤ {symbol}: {missing}")
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∞—Å—Å–∏–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
        try:
            X = latest_row[FEATURE_COLUMNS].astype(float).values.reshape(1, -1)
        except Exception as e:
            print(f"‚ùå –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ {symbol} –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}")
            return None

        if not np.isfinite(X).all():
            if verbose:
                print(f"‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: {X}")
            return None

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        y_proba = MODEL.predict_proba(X)[0, 1]
        y_pred = int(y_proba > THRESHOLD)

        # –£–±—Ä–∞–ª print –æ—Ç—Å—é–¥–∞ - –±—É–¥–µ—Ç –≤ send_alert
        if y_pred == 1:
            # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–ª–µ—Ä—Ç–∞
            with buffer_locks[symbol]:
                buffer = candle_buffers.get(symbol)
                raw_latest = buffer['raw_data'].iloc[-1] if buffer else None
            
            return latest_row, y_pred, y_proba, raw_latest  # –¥–ª—è monitor_loop

        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {symbol}: {str(e)[:150]}...")
        return None


# %% [markdown]
# ## –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# %% [markdown]
# ### send_alert

# %%
def send_alert(symbol, latest_row, raw_row, y_pred=None, y_proba=None, send_telegram=True, send_orders=False):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        candle_time = pd.to_datetime(raw_row['Date']).strftime("%Y-%m-%d %H:%M:%S")
        price = float(raw_row['Close'])
        alert_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

        # –ï—Å–ª–∏ y_pred/y_proba –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        if y_pred is None or y_proba is None:
            X = latest_row[FEATURE_COLUMNS].values.reshape(1, -1)
            y_proba = MODEL.predict_proba(X)[0, 1]
            y_pred = int(y_proba > THRESHOLD)

        # --- –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô –í–´–í–û–î –í –ö–û–ù–°–û–õ–¨ ---
        if y_pred == 1:
            print(f"\nüö® –°–ò–ì–ù–ê–õ: {symbol} | –í—Ä–µ–º—è —Å–≤–µ—á–∏: {candle_time} | "
                  f"–¶–µ–Ω–∞: {price:.6f} | –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {y_proba:.4f} | "
                  f"–ü–æ—Ä–æ–≥: {THRESHOLD:.2f} ‚Üí –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {y_pred}")
        else:
            print(f"üìâ {symbol}: proba={y_proba:.4f}, threshold={THRESHOLD:.2f} ‚Üí pred={y_pred}")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message = (
            f"üö® **–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª**\n"
            f"**–ú–æ–Ω–µ—Ç–∞:** {symbol}\n"
            f"**–í—Ä–µ–º—è —Å–≤–µ—á–∏:** {candle_time} (UTC)\n"
            f"**–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:** {price:.6f}\n"
            f"**–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:** {y_proba:.4f}\n"
            f"**–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:** {y_pred}\n"
        )

        # –¢–æ—Ä–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        order_sent = False
        if send_orders and y_pred == 1:
            order_sent = place_buy_order_with_checks(symbol, price)
            order_message = "‚úÖ –û—Ä–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" if order_sent else "‚ö†Ô∏è –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ä–¥–µ—Ä–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"
            message += f"\n\n{order_message}"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram
        if send_telegram and y_pred == 1:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã
            send_telegram_alert(message)

        return order_sent

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ send_alert –¥–ª—è {symbol}: {e}")
        return False


# %% [markdown]
# ### send_telegram_alert

# %%
def send_telegram_alert(message):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram.
    """
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        response = requests.post(url, json=payload, timeout=10)
        data = response.json()

        if not data.get("ok"):
            print(f"‚ö†Ô∏è Telegram API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {data}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")


# %% [markdown]
# # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–π —Å–≤–µ—á–∏ —Å bybit

# %% [markdown]
# ## fetch_latest_candle

# %%
def fetch_latest_candle(symbol, tf):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –ó–ê–ö–†–´–¢–£–Æ —Å–≤–µ—á—É –¥–ª—è —Å–∏–º–≤–æ–ª–∞"""
    url = "https://api.bybit.com/v5/market/kline"
    
    params = {
        'category': 'linear',
        'symbol': symbol,
        'interval': str(int(tf)),
        'limit': 2  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 2 —Å–≤–µ—á–∏
    }

    try:
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        result = r.json().get('result', {})
        candles = result.get('list', [])
        
        if not candles or len(candles) < 2:
            print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return None

        # –ë–µ—Ä–µ–º –ü–†–ï–î–´–î–£–©–£–Æ —Å–≤–µ—á—É (–≤—Ç–æ—Ä–∞—è –≤ —Å–ø–∏—Å–∫–µ), –∫–æ—Ç–æ—Ä–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞
        closed_candle = candles[1]  # ‚Üê –≠—Ç–æ –≤–∞–∂–Ω–æ!

        df = pd.DataFrame([closed_candle], columns=["timestamp", "open", "high", "low", "close", "volume", "turnover"])
        df = df[["timestamp", "open", "high", "low", "close", "volume"]].copy()
        df.columns = ["Date", "Open", "High", "Low", "Close", "Volume"]

        df["Date"] = pd.to_datetime(df["Date"].astype(float), unit="ms")
        for col in ["Open", "High", "Low", "Close", "Volume"]:
            df[col] = df[col].astype(float)

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞ {symbol}: {df['Date'].iloc[0]} - Close: {df['Close'].iloc[0]}")
        return df

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–∏ {symbol}: {e}")
        return None

# %%
